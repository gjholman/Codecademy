SELECT * from tablename;

INSERT INTO tablename (input1, input 2, ...)
VALUES (1, asdf, ...);

ALTER TABLE tablename
ADD COLUMN something something;

UPDATE tablename
SET twitter_handle = "@tswizzle_foshizzle" where name = "taylor swift"; //updates taylor swifts twitter to what it should be 

DELETE FROM celebs
WHERE twitter_handle IS NULL; // delete everyone without a twitter name

----- CONSTRAINTS -----
CREATE TABLE celebs (
   id INTEGER PRIMARY KEY, // PRIMARY KEY - UNIQUE AND MAX 1 PER ROW
   name TEXT UNIQUE,	// UNIQUE - 1 PER COLUMN - unlimited amount of unique per row
   date_of_birth TEXT NOT NULL, // can't be null or it won't get added
   date_of_death TEXT DEFAULT 'Not Applicable' // Default is set to this
);

SELECT *
FROM movies
WHERE name LIKE '%man%'; //Gives us all the movies with man in the name

SELECT DISTINCT neighborhood
FROM nomnom;

SELECT name
FROM movies
WHERE imdb_rating IS NULL; // gives us everything that hasn't been rated

SELECT * from movies
WHERE year BETWEEN 1970 AND 1979;

SELECT *
FROM movies
WHERE genre = 'romance'
OR genre = 'comedy'; // OR, AND, etc.

SELECT name, year
FROM movies
ORDER BY name;

SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;

----- CASE -----
SELECT name,
  CASE
    WHEN genre == 'romance' THEN 'Chill' // can also use just '=' :)
    WHEN genre == 'comedy' THEN 'Chill'
    ELSE 'Intense'
  END AS 'Mood'
from movies;

----- INTERMIDIATE -----
SELECT COUNT(*) //Returns the number of * in table_name
FROM table_name;

MIN, MAX, SUM, AVG, ROUND

SELECT AVG(imdb_rating)
FROM movies
GROUP BY year;

SELECT category, SUM(downloads)
FROM fake_apps
GROUP BY category;

SELECT price,
  ROUND(AVG(downloads)),
  COUNT(*)
FROM fake_apps
GROUP BY price
HAVING COUNT(name) > 10;

!!!! WHERE filters rows and HAVING filters groups !!!!

